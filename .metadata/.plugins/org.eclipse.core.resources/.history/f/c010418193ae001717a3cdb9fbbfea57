package greatestCommonAncestor;
import java.util.NoSuchElementException;


public class Ancestor<Key extends Comparable<Key>, Value> {

	public Node root;             // root of BST

	/**
	 * Private node class.
	 */
	private class Node {
		private Key key;           // sorted by key
		private Value val;         // associated data
		private Node left, right;  // left and right subtrees
		private int N;             // number of nodes in subtree

		public Node(Key key, Value val, int N) {
			this.key = key;
			this.val = val;
			this.N = N;
		}

	}

	// is the symbol table empty?
	public boolean isEmpty() { return size() == 0; }

	// return number of key-value pairs in BST
	public int size() { return size(root); }

	// return number of key-value pairs in BST rooted at x
	private int size(Node x) {
		if (x == null) return 0;
		else return x.N;
	}

	public boolean contains(Key key) {
		return get(key) != null;
	}

	public Value get(Key key) { return get(root, key); }

	private Value get(Node x, Key key) {
		if (x == null) return null;
		int cmp = key.compareTo(x.key);
		if      (cmp < 0) return get(x.left, key);
		else if (cmp > 0) return get(x.right, key);
		else              return x.val;
	}

	public void put(Key key, Value val) {
		if (val == null) { delete(key); return; }
		root = put(root, key, val);
	}

	private Node put(Node x, Key key, Value val) {
		if (x == null) return new Node(key, val, 1);
		int cmp = key.compareTo(x.key);
		if      (cmp < 0) x.left  = put(x.left,  key, val);
		else if (cmp > 0) x.right = put(x.right, key, val);
		else              x.val   = val;
		x.N = 1 + size(x.left) + size(x.right);
		return x;
	}

	public int height() {
		if(isEmpty())
		{
			return -1;
		}
		Node x = root;
		if(x.left == null && x.right == null)
		{
			return 0;
		}
		int heightVal = getHeight(x);
		return heightVal-1;
	}

	private int getHeight(Node x)
	{
		Node left = x.left;
		Node right = x.right;
		int heightLeft = 0;
		int heightRight = 0;
		if(left != null)
		{
			heightLeft = getHeight(left);
		}
		if(right !=null)
		{
			heightRight = getHeight(right);
		}
		if(heightLeft > heightRight)
		{
			return heightLeft + 1;
		}
		else
		{
			return heightRight + 1;
		}
	}

	public void delete(Key key) {
		if (key == null) throw new IllegalArgumentException("argument to delete() is null");
		root = delete(root, key);
	}

	private Node deleteMax(Node x) {
		if (x == null) return null;
		if (x.right == null) return x.left;
		x.right = deleteMax(x.right);
		x.N -=1;
		return x;
	}

	private Node max(Node x) {
		if (x.right == null) return x; 
		else                 return max(x.right); 
	} 


	private Node delete(Node x, Key key)
	{
		if (x == null) return null;

		int cmp = key.compareTo(x.key);
		if      (cmp < 0) x.left  = delete(x.left,  key);
		else if (cmp > 0) x.right = delete(x.right, key);
		else { 
			if (x.right == null) return x.left;
			if (x.left  == null) return x.right;
			Node t = x;
			x = max(t.left);
			x.left = deleteMax(t.left);
			x.right = t.right;
		} 
		x.N = size(x.left) + size(x.right) + 1;
		return x;
	}
	
	
	//Help source: www.geeksforgeeks.org
	public Node lowestCommonAncestor(Node node, Key key1, Key key2)
	{
		if (node == null)
		{
			return null;
		}
		int cmp1 = node.key.compareTo(key1);
		int cmp2 = node.key.compareTo(key2);
		if (cmp1 > 0 && cmp2 > 0)
		{
			return lowestCommonAncestor(node.left, key1, key2);
		}
		if (cmp1 < 0 && cmp2 < 0)
		{
			return lowestCommonAncestor(node.right, key1, key2);
		}
		return node;
	}





}
