package greatestCommonAncestor;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class AncestorTest {

	@Test
	public void testContains() {
		Ancestor<Integer, Integer> bst = new Ancestor<Integer, Integer>();
		assertEquals("Check contains of empty BST", false, bst.contains(0));
		bst.put(7, 7);   //        _7_
		bst.put(8, 8);   //      /     \
		bst.put(3, 3);   //    _3_      8
		bst.put(1, 1);   //  /     \     \
		bst.put(2, 2);   // 1       6     8
		bst.put(6, 6);   //  \     /
		bst.put(4, 4);   //   2   4
		bst.put(5, 5);   //        \
		                 //         5
		bst.put(9,  null);
		bst.put(8, 8);
		assertEquals("Check if it contains something", true, bst.contains(4));
	}
	
	@Test
	public void testHeight() {
		Ancestor<Integer, Integer> bst = new Ancestor<Integer, Integer>();
		assertEquals("Check height of empty BST", -1, bst.height());

		bst.put(7, 7);   //        _7_
		assertEquals("Check height of BST with one node", 0, bst.height());
		bst.put(8, 8);   //      /     \
		bst.put(3, 3);   //    _3_      8
		bst.put(1, 1);   //  /     \
		bst.put(2, 2);   // 1       6
		bst.put(6, 6);   //  \     /
		bst.put(4, 4);   //   2   4
		bst.put(5, 5);   //        \
		//         5
		assertEquals("Check height of BST", 4, bst.height());
	}
	
	@Test
	public void testDelete() {
		Ancestor<Integer, Integer> bst = new Ancestor<Integer, Integer>();
		bst.delete(1);
		assertEquals("Deleting from empty tree", "()", bst.printKeysInOrder());

		bst.put(7, 7);   //        _7_
		bst.put(8, 8);   //      /     \
		bst.put(3, 3);   //    _3_      8
		bst.put(1, 1);   //  /     \
		bst.put(2, 2);   // 1       6
		bst.put(6, 6);   //  \     /
		bst.put(4, 4);   //   2   4
		bst.put(5, 5);   //        \
		                 //         5

		assertEquals("Checking order of constructed tree",
				"(((()1(()2()))3((()4(()5()))6()))7(()8()))", bst.printKeysInOrder());

		bst.delete(9);
		assertEquals("Deleting non-existent key",
				"(((()1(()2()))3((()4(()5()))6()))7(()8()))", bst.printKeysInOrder());

		bst.delete(8);
		assertEquals("Deleting leaf", "(((()1(()2()))3((()4(()5()))6()))7())", bst.printKeysInOrder());

		bst.delete(6);
		assertEquals("Deleting node with single child",
				"(((()1(()2()))3(()4(()5())))7())", bst.printKeysInOrder());

		bst.delete(3);
		assertEquals("Deleting node with two children",
				"(((()1())2(()4(()5())))7())", bst.printKeysInOrder());
		
		bst.delete(4);
		assertEquals("Deleting node with two children",
				"(((()1())2(()5()))7())", bst.printKeysInOrder());
		
	}


	

}
